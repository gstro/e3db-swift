#!/bin/bash

# Script to run xcodebuild tests for each iOS simulator platform.
# Calls companion bash script 'test_one_platform'
# Platform list generated by `xcodebuild -scheme valid_scheme -destination "platform=unknown"`
# Uses third party tools for convenience:
#   terminal-notifier - for CLI local notifications https://github.com/julienXX/terminal-notifier

if [ $# -ne 1 ]; then
  echo "Usage: $0 FILE_OF_PLATFORM_STRINGS" >&2
  exit 1
fi

mkdir -p "testlogs"
F_TESTS_FILE="failed_platforms.txt"

COUNT=0
FAILED_TESTS=( )
FAILED_PLATFORMS=( )
while IFS='' read -r line || [[ -n "$line" ]]; do
  COUNT=$((COUNT+1))
  TEST="Test $COUNT: $line"
  echo "*********************************"
  echo ""
  echo "$TEST"
  echo ""
  echo "*********************************"
  ./test_one_platform "$line" "$COUNT"
  (($? != 0)) && FAILED_TESTS+=("$TEST") && FAILED_PLATFORMS+=("$line")
done < "$1"

MSG="Executed tests on $COUNT"
(($COUNT == 1)) && MSG="$MSG platform" || MSG="$MSG platforms"
MSG="$MSG, with ${#FAILED_TESTS[@]}"
((${#FAILED_TESTS[@]} == 1)) && MSG="$MSG failure." || MSG="$MSG failures."

echo ""
echo "*********************************"
echo ""
echo "All Tests Completed."
echo ""
echo "$MSG"
echo ""
if [ -n "$FAILED_TESTS" ]; then
  echo "Failed Tests:"
  for TEST in "${FAILED_TESTS[@]}"; do
    echo "    $TEST"
  done

  rm -f $F_TESTS_FILE
  for LINE in "${FAILED_PLATFORMS[@]}"; do
    echo "$LINE" >> $F_TESTS_FILE
  done
fi
echo "*********************************"
terminal-notifier -message "$MSG"
